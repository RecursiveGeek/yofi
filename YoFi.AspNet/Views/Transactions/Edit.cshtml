@model YoFi.Core.Models.Transaction

@{
    ViewData["Title"] = "Edit Transaction";
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

<input type="hidden" id="xsrf"
       name="xsrf" value="@GetAntiXsrfRequestToken()">

<h2>@ViewData["Title"]</h2>
<hr />
<div class="row mb-3">
    <div class="col-md-6">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ID" />
            <input type="hidden" asp-for="ReceiptUrl" />
            <div class="form-group">
                <label asp-for="Payee" class="control-label"></label>
                <input asp-for="Payee" class="form-control" />
                <span asp-validation-for="Payee" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Amount" class="control-label"></label>
                <input asp-for="Amount" class="form-control" />
                <span asp-validation-for="Amount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Timestamp" class="control-label"></label>
                <input asp-for="Timestamp" class="form-control" />
                <span asp-validation-for="Timestamp" class="text-danger"></span>
            </div>
            @if (!Model.HasSplits)
            {
                <div class="form-group">
                    <label asp-for="Category" class="control-label"></label>
                    <input asp-for="Category" class="form-control category-autocomplete" autocomplete="off" />
                    <span asp-validation-for="Category" class="text-danger"></span>
                </div>
            }
            <div class="form-group">
                <label asp-for="Memo" class="control-label"></label>
                <input asp-for="Memo" class="form-control" />
                <span asp-validation-for="Memo" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="BankReference" class="control-label"></label>
                <input asp-for="BankReference" class="form-control" />
                <span asp-validation-for="BankReference" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
                <a asp-action="Index" class="btn btn-secondary">Cancel</a>
                <input type="submit" value="Duplicate" class="btn btn-outline-secondary" asp-route-duplicate="true" />
                <a asp-action="Delete" asp-route-id="@Model.ID" class="btn btn-outline-secondary" style="float:right">Delete</a>
            </div>
        </form>

    </div>
</div>

<h2>Splits</h2>
<hr />

@*
    UPLOAD SPLITS
*@

@if (!Model.HasSplits)
{
    <form method="post" enctype="multipart/form-data" asp-controller="Transactions" asp-action="UpSplits">
        <div class="input-group mb-3">
            <button class="btn btn-secondary" type="submit" id="inputGroupFileAddon03" disabled>Upload</button>
            <input type="file" class="form-control" id="inputGroupFile03" aria-describedby="inputGroupFileAddon03" aria-label="UploadSplits" name="files">
            <input type="hidden" asp-for="ID" />
        </div>
    </form>
}

@*
    FIX SPLITS
*@

@if (!Model.IsSplitsOK)
{
    <form asp-action="CreateSplit" asp-route-id="@Model.ID">
        <div class="alert alert-danger" role="alert" data-test-id="splits-not-ok">
            <strong>Incomplete Splits Balance</strong> Please add another split to contain the remaining balance.
            <button type="submit" class="btn btn-danger ms-2" data-test-id="btn-fix-split">Add</button>
        </div>
    </form>
}

@*
    SPLITS TABLE
*@

<div class="row">
    <div class="col-md-12">

        @if (Model.HasSplits)
        {
            var splitorder = (Model.Amount < 0) ? Model.Splits.OrderBy(x => x.Amount) : Model.Splits.OrderByDescending(x => x.Amount);
            <table class="table" data-test-id="splits">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(x => x.Category)
                        </th>
                        <th>
                            @Html.DisplayNameFor(x => x.Amount)
                        </th>
                        <th>
                            @Html.DisplayNameFor(x => x.Memo)
                        </th>
                        <th>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        var line = 1;
                    }
                    @foreach (var split in splitorder)
                    {
                    <tr data-test-id="line-@(line++)">
                        <td>
                            @(split.Category ?? String.Empty)
                        </td>
                        <td data-test-id="split-amount">
                            @split.Amount
                        </td>
                        <td>
                            @split.Memo
                        </td>
                        <td>
                            <a class="btn btn-outline-secondary btn-sm" asp-controller="Splits" asp-action="Edit" asp-route-id="@split.ID" data-bs-toggle="tooltip" title="Edit"><i class="fa fa-edit"></i></a>
                            <a class="btn btn-outline-secondary btn-sm" asp-controller="Splits" asp-action="Delete" asp-route-id="@split.ID" data-bs-toggle="tooltip" title="Delete"><i class="fa fa-trash-alt"></i></a>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
</div>

@*
    CREATE SPLIT
*@

<form asp-action="CreateSplit" asp-route-id="@Model.ID">
    <button type="submit" class="btn btn-primary mb-3" data-test-id="btn-add-split">Add</button>
</form>

<br />

@*
    RECEIPT
*@

<h2>Receipt</h2>
<hr />

@if (null == Model.ReceiptUrl)
{
    var hasreceipts = (bool)ViewData["Receipt.Any"];

    <p>You can upload a receipt file here</p>
    <form method="post" enctype="multipart/form-data" asp-controller="Transactions" asp-action="UpReceipt">
        <div class="input-group mb-3">
            <button class="btn btn-primary" type="submit" id="inputGroupFileAddon03" data-test-id="btn-create-receipt" disabled>Upload</button>
            <input type="file" class="form-control" id="inputGroupFile03" aria-describedby="inputGroupFileAddon03" aria-label="UploadReceipt" name="files">
            <input type="hidden" asp-for="ID" />
        </div>
    </form>

    @if (hasreceipts)
    {
        var nmatches = ViewData["Receipt.Matches"] as int?;
        var suggested = ViewData["Receipt.Suggested"] as Receipt;

        <div data-test-id="hasreceipts">
            <p>
                <span>Or you can select one of the previously-uploaded receipts here</span>
                @if (nmatches > 1)
                {
                    <br/><span>Found: <span data-test-id="nmatches">@nmatches</span> possible matching receipts</span>
                }
            </p>

            @if (nmatches > 0)
            {
                <p>Suggested: <span data-test-id="suggestedfilename">@suggested.Filename</span></p>
                @* 
                TODO: This flow is not great. It will redirect to Receipts/Index, which is not obvious. Instead, we need to do this with a dialog, and
                then stay here on this page. 
                *@
                <a asp-controller="Receipts" asp-action="Accept" asp-route-txid="@Model.ID" asp-route-id="@suggested.ID" class="btn btn-primary" data-test-id="accept" data-test-value="@suggested.ID">Accept</a>
            }

            <a asp-controller="Receipts" asp-action="Pick" asp-route-txid="@Model.ID" class="btn btn-secondary">Review</a>
        </div>
    }
}
else
{
    <form asp-action="ReceiptAction" asp-route-id="@Model.ID">
        <button type="submit" name="action" value="get" class="btn btn-primary mb-3" data-test-id="btn-get-receipt">Download</button>
        <button type="submit" name="action" value="delete" class="btn btn-outline-secondary mb-3" data-test-id="btn-delete-receipt">Delete</button>
    </form>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
